/**************ASM 17.12.2015**************/

Matrici:

a[1][2] ~ (i*m+j)*4

[ebx + esi*m + edi*4]

;esi : i
;edi : j
;ebx : a
;eax : index
;ecx : sum

for (i=0; i<n; i++)
	for (j=0; j<m; j++)
		s+=a[i][j];

/***** Suma elementelor unei matrici *****/
#include "stdafx.h"
#include <iostream>
using namespace std;

int main()
{
	int s, n=2, m=3;
	int a[2][3] = { 1,1,8,5,6 };
	_asm {
		lea ebx, a
		mov ecx, 0
		mov esi, 0
	_startFor1:
		cmp esi, n
		jge _endFor1
		mov edi, 0
	_startFor2:
		cmp edi, m
		jge _endFor2
		mov eax, m
		mul esi
		add eax, edi
		add ecx, [ebx + eax * 4]
		inc edi
		jmp _startFor2
	_endFor2:
		inc esi
		jmp _startFor1
	_endFor1:
		mov s, ecx
	}
	printf("%d \n", s);
    return 0;
}

/***** Suma elementelor unei matrici utilizand o functie *****/

// call suma <- salveaza pe stiva adresa la care trebuie sa revina dupa executarea fucntiei
// ret <- preia de pe stiva valoarea adresei la care trebuie sa revina

Eliberarea stivei:

pop edx
pop edx
pop edx
add esp, 12

#include "stdafx.h"
#include <iostream>
using namespace std;

/*
const int n = 2;
const int m = 3;
int a[2][3] = { 1,1,8,5,6 };
int s;
*/

int suma(int a[2][3], int n, int m)
{
	int s = 0;
	_asm {
		    mov ebx, a
			mov ecx, 0
			mov esi, 0
			_startFor1:
		cmp esi, n
			jge _endFor1
			mov edi, 0
			_startFor2 :
			cmp edi, m
			jge _endFor2
			mov eax, m
			mul esi
			add eax, edi
			add ecx, [ebx + eax * 4]
			inc edi
			jmp _startFor2
			_endFor2 :
		inc esi
			jmp _startFor1
			_endFor1 :
		; mov s, ecx
		mov eax, ecx
	}
}

int main()
{
	int n = 2;
	int m = 3;
	int a[2][3] = { 1,1,8,5,6,7 };
	int s;
	// s = suma(a, n, m);
	_asm {
		push m
		push n
		lea ebx, a
		push ebx
		call suma
		add esp, 12
		mov s, eax
	}
	printf("%d \n", s);
    return 0;
}

/* Stack Frame
push ebp
mov ebp, esp
{
	// Codul functiei
}
pop ebp
ret

int suma(int a[2][3], int n, int m) => suma:
*/

TEMA: Suma elementelor prime dintr-o matrice.

